{"version":3,"sources":["../../src/redux/nodes.ts"],"names":["getNodes","nodes","store","getState","Array","from","values","getNode","id","get","getNodesByType","type","nodesByType","getTypes","keys","hasNodeChanged","digest","node","internal","contentDigest","getNodeAndSavePathDependency","path","console","error","undefined","nodeId","saveResolvedNodes","nodeTypeNames","resolver","typeName","resolvedNodes","Map","resolved","set","dispatch","payload","key","getResolvedNode","resolvedNodesCache","__gatsby_resolved","addResolvedNodes","resolvedNodesFromCache","forEach","push","postIndexingMetaSetup","filterCache","op","entriesNullable","byValue","entries","filter","v","sort","a","b","orderedNodes","orderedValues","offsets","bucket","length","size","meta","valuesAsc","nodesByValueAsc","valueRangesAsc","valuesDesc","nodesByValueDesc","valueRangesDesc","ensureIndexByQuery","filterCacheKey","filterPath","filtersCache","state","addNodeToFilterCache","includes","chain","valueOffset","prev","i","nextProp","Set","add","ensureIndexByElemMatch","addNodeToBucketWithElemMatch","valueAtCurrentStep","nestedQuery","isArray","elem","binarySearchAsc","needle","min","max","pivot","Math","floor","value","binarySearchDesc","getNodesFromCacheByValue","filterValue","ranges","range","slice","point","pivotMin","pivotMax","pivotValue","exclPivot","inclPivot","until"],"mappings":";;;;;AAAA;;AAEA;;AA+BA;;;AAGO,MAAMA,QAAQ,GAAG,MAAqB;AAC3C,QAAMC,KAAK,GAAGC,QAAMC,QAAN,GAAiBF,KAA/B;;AACA,MAAIA,KAAJ,EAAW;AACT,WAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPM;AASP;;;;;;;AAGO,MAAMC,OAAO,GAAIC,EAAD,IACrBN,QAAMC,QAAN,GAAiBF,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CADK;AAGP;;;;;;;AAGO,MAAME,cAAc,GAAIC,IAAD,IAAiC;AAC7D,QAAMV,KAAK,GAAGC,QAAMC,QAAN,GAAiBS,WAAjB,CAA6BH,GAA7B,CAAiCE,IAAjC,CAAd;;AACA,MAAIV,KAAJ,EAAW;AACT,WAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPM;AASP;;;;;;;AAGO,MAAMO,QAAQ,GAAG,MACtBT,KAAK,CAACC,IAAN,CAAWH,QAAMC,QAAN,GAAiBS,WAAjB,CAA6BE,IAA7B,EAAX,CADK;AAGP;;;;;;;AAGO,MAAMC,cAAc,GAAG,CAACP,EAAD,EAAaQ,MAAb,KAAyC;AACrE,QAAMC,IAAI,GAAGf,QAAMC,QAAN,GAAiBF,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CAAb;;AACA,MAAI,CAACS,IAAL,EAAW;AACT,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAACC,QAAL,CAAcC,aAAd,KAAgCH,MAAvC;AACD;AACF,CAPM;AASP;;;;;;;AAGO,MAAMI,4BAA4B,GAAG,CAC1CZ,EAD0C,EAE1Ca,IAF0C,KAGd;AAC5B,QAAMJ,IAAI,GAAGV,OAAO,CAACC,EAAD,CAApB;;AAEA,MAAI,CAACS,IAAL,EAAW;AACTK,IAAAA,OAAO,CAACC,KAAR,CACG,oDAAmDf,EAAG,+BADzD;AAGA,WAAOgB,SAAP;AACD;;AAED,+CAAqB;AAAEH,IAAAA,IAAF;AAAQI,IAAAA,MAAM,EAAEjB;AAAhB,GAArB;AACA,SAAOS,IAAP;AACD,CAfM;;;;AAiB6C;AAE7C,MAAMS,iBAAiB,GAAG,OAC/BC,aAD+B,EAE/BC,QAF+B,KAGb;AAClB,OAAK,MAAMC,QAAX,IAAuBF,aAAvB,EAAsC;AACpC,UAAM1B,KAAK,GAAGC,QAAMC,QAAN,GAAiBS,WAAjB,CAA6BH,GAA7B,CAAiCoB,QAAjC,CAAd;;AACA,QAAI,CAAC5B,KAAL,EAAY;AAEZ,UAAM6B,aAAa,GAAG,IAAIC,GAAJ,EAAtB;;AACA,SAAK,MAAMd,IAAX,IAAmBhB,KAAK,CAACK,MAAN,EAAnB,EAAmC;AACjC,YAAM0B,QAAQ,GAAG,MAAMJ,QAAQ,CAACX,IAAD,CAA/B;AACAa,MAAAA,aAAa,CAACG,GAAd,CAAkBhB,IAAI,CAACT,EAAvB,EAA2BwB,QAA3B;AACD;;AACD9B,YAAMgC,QAAN,CAAe;AACbvB,MAAAA,IAAI,EAAG,oBADM;AAEbwB,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAEP,QADE;AAEP5B,QAAAA,KAAK,EAAE6B;AAFA;AAFI,KAAf;AAOD;AACF,CArBM;AAuBP;;;;;;;AAGO,MAAMO,eAAe,GAAG,CAC7BR,QAD6B,EAE7BrB,EAF6B,KAGN;AACvB,QAAM;AAAEI,IAAAA,WAAF;AAAe0B,IAAAA;AAAf,MAAsCpC,QAAMC,QAAN,EAA5C;;AACA,QAAMF,KAAK,GAAGW,WAAW,CAACH,GAAZ,CAAgBoB,QAAhB,CAAd;;AAEA,MAAI,CAAC5B,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,QAAMgB,IAAI,GAAGhB,KAAK,CAACQ,GAAN,CAAUD,EAAV,CAAb;;AAEA,MAAI,CAACS,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,QAAMa,aAAa,GAAGQ,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAAtB;;AAEA,MAAIC,aAAJ,EAAmB;AACjBb,IAAAA,IAAI,CAACsB,iBAAL,GAAyBT,aAAa,CAACrB,GAAd,CAAkBD,EAAlB,CAAzB;AACD;;AAED,SAAOS,IAAP;AACD,CAxBM;;;;AA0BA,MAAMuB,gBAAgB,GAAG,CAC9BX,QAD8B,EAE9BC,aAA4B,GAAG,EAFD,KAGZ;AAClB,QAAM;AAAElB,IAAAA,WAAF;AAAe0B,IAAAA;AAAf,MAAsCpC,QAAMC,QAAN,EAA5C;;AACA,QAAMF,KAAK,GAAGW,WAAW,CAACH,GAAZ,CAAgBoB,QAAhB,CAAd;;AAEA,MAAI,CAAC5B,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AAED,QAAMwC,sBAAsB,GAAGH,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAA/B;AAEA5B,EAAAA,KAAK,CAACyC,OAAN,CAAczB,IAAI,IAAI;AACpB,QAAIwB,sBAAJ,EAA4B;AAC1BxB,MAAAA,IAAI,CAACsB,iBAAL,GAAyBE,sBAAsB,CAAChC,GAAvB,CAA2BQ,IAAI,CAACT,EAAhC,CAAzB;AACD;;AACDsB,IAAAA,aAAa,CAACa,IAAd,CAAmB1B,IAAnB;AACD,GALD;AAOA,SAAOa,aAAP;AACD,CArBM;;;;AAuBA,MAAMc,qBAAqB,GAAG,CACnCC,WADmC,EAEnCC,EAFmC,KAG1B;AACT,MAAIA,EAAE,KAAM,MAAR,IAAiBA,EAAE,KAAM,MAA7B,EAAoC;AAClC;AACD,GAHQ,CAKT;AACA;AACA;;;AAEA,QAAMC,eAA+D,GAAG,CACtE,GAAGF,WAAW,CAACG,OAAZ,CAAoBC,OAApB,EADmE,CAAxE,CATS,CAaT;AACA;;AACA,QAAMA,OAGJ,GAAGF,eAAe,CAACG,MAAhB,CAAuB,CAAC,CAACC,CAAD,CAAD,KAASA,CAAC,IAAI,IAArC,CAHL,CAfS,CAsBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIL,EAAE,KAAM,MAAZ,EAAmB;AACjB;AACAG,IAAAA,OAAO,CAACG,IAAR,CAAa,CAAC,CAACC,CAAD,CAAD,EAAM,CAACC,CAAD,CAAN,KAAeD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAArD;AACD,GAHD,MAGO,IAAIR,EAAE,KAAM,MAAZ,EAAmB;AACxB;AACAG,IAAAA,OAAO,CAACG,IAAR,CAAa,CAAC,CAACC,CAAD,CAAD,EAAM,CAACC,CAAD,CAAN,KAAeD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAArD;AACD;;AAED,QAAMC,YAAgC,GAAG,EAAzC;AACA,QAAMC,aAAiC,GAAG,EAA1C;AACA,QAAMC,OAA2C,GAAG,IAAI1B,GAAJ,EAApD;AACAkB,EAAAA,OAAO,CAACP,OAAR,CAAgB,CAAC,CAACS,CAAD,EAAIO,MAAJ,CAAD,KAAkD;AAChE;AACA;AACA;AACAD,IAAAA,OAAO,CAACxB,GAAR,CAAYkB,CAAZ,EAAe,CAACI,YAAY,CAACI,MAAd,EAAsBJ,YAAY,CAACI,MAAb,GAAsBD,MAAM,CAACE,IAAnD,CAAf,EAJgE,CAKhE;AACA;;AACAF,IAAAA,MAAM,CAAChB,OAAP,CAAezB,IAAI,IAAIsC,YAAY,CAACZ,IAAb,CAAkB1B,IAAlB,CAAvB;AACAuC,IAAAA,aAAa,CAACb,IAAd,CAAmBQ,CAAnB;AACD,GATD;;AAWA,MAAIL,EAAE,KAAM,MAAZ,EAAmB;AACjBD,IAAAA,WAAW,CAACgB,IAAZ,CAAiBC,SAAjB,GAA6BN,aAA7B;AACAX,IAAAA,WAAW,CAACgB,IAAZ,CAAiBE,eAAjB,GAAmCR,YAAnC,CAFiB,CAGjB;AACA;AACA;;AACAV,IAAAA,WAAW,CAACgB,IAAZ,CAAiBG,cAAjB,GAAkCP,OAAlC;AACD,GAPD,MAOO,IAAIX,EAAE,KAAM,MAAZ,EAAmB;AACxBD,IAAAA,WAAW,CAACgB,IAAZ,CAAiBI,UAAjB,GAA8BT,aAA9B;AACAX,IAAAA,WAAW,CAACgB,IAAZ,CAAiBK,gBAAjB,GAAoCX,YAApC,CAFwB,CAGxB;AACA;AACA;;AACAV,IAAAA,WAAW,CAACgB,IAAZ,CAAiBM,eAAjB,GAAmCV,OAAnC;AACD;AACF,CA3EM;AA6EP;;;;;;;;;;;AAOO,MAAMW,kBAAkB,GAAG,CAChCtB,EADgC,EAEhCuB,cAFgC,EAGhCC,UAHgC,EAIhC3C,aAJgC,EAKhC4C,YALgC,KAMvB;AACT,QAAMC,KAAK,GAAGtE,QAAMC,QAAN,EAAd;;AACA,QAAMmC,kBAAkB,GAAGkC,KAAK,CAAClC,kBAAjC;AAEA,QAAMO,WAAyB,GAAG;AAAEC,IAAAA,EAAF;AAAME,IAAAA,OAAO,EAAE,IAAIjB,GAAJ,EAAf;AAA0B8B,IAAAA,IAAI,EAAE;AAAhC,GAAlC;AACAU,EAAAA,YAAY,CAACtC,GAAb,CAAiBoC,cAAjB,EAAiCxB,WAAjC,EALS,CAOT;AACA;AACA;;AAEA,MAAIlB,aAAa,CAACgC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BjD,IAAAA,cAAc,CAACiB,aAAa,CAAC,CAAD,CAAd,CAAd,CAAiCe,OAAjC,CAAyCzB,IAAI,IAAI;AAC/CwD,MAAAA,oBAAoB,CAACxD,IAAD,EAAOqD,UAAP,EAAmBzB,WAAnB,EAAgCP,kBAAhC,CAApB;AACD,KAFD;AAGD,GAJD,MAIO;AACL;AACA;AACAkC,IAAAA,KAAK,CAACvE,KAAN,CAAYyC,OAAZ,CAAoBzB,IAAI,IAAI;AAC1B,UAAI,CAACU,aAAa,CAAC+C,QAAd,CAAuBzD,IAAI,CAACC,QAAL,CAAcP,IAArC,CAAL,EAAiD;AAC/C;AACD;;AAED8D,MAAAA,oBAAoB,CAACxD,IAAD,EAAOqD,UAAP,EAAmBzB,WAAnB,EAAgCP,kBAAhC,CAApB;AACD,KAND;AAOD;;AAEDM,EAAAA,qBAAqB,CAACC,WAAD,EAAcC,EAAd,CAArB;AACD,CAlCM;;;;AAoCP,SAAS2B,oBAAT,CACExD,IADF,EAEE0D,KAFF,EAGE9B,WAHF,EAIEP,kBAJF,EAKEsC,WAAgB,GAAG3D,IALrB,EAMQ;AACN;AACA,MAAI,CAACA,IAAI,CAACsB,iBAAV,EAA6B;AAC3B,UAAMV,QAAQ,GAAGZ,IAAI,CAACC,QAAL,CAAcP,IAA/B;AACA,UAAMmB,aAAa,GAAGQ,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAAtB;AACAZ,IAAAA,IAAI,CAACsB,iBAAL,GAAyBT,aAAzB,aAAyBA,aAAzB,uBAAyBA,aAAa,CAAErB,GAAf,CAAmBQ,IAAI,CAACT,EAAxB,CAAzB;AACD,GANK,CAQN;AACA;;;AACA,MAAI2C,CAAC,GAAGyB,WAAR;AACA,MAAIC,IAAI,GAAG1B,CAAX;AACA,MAAI2B,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGH,KAAK,CAAChB,MAAV,IAAoBR,CAA3B,EAA8B;AAC5B,UAAM4B,QAAQ,GAAGJ,KAAK,CAACG,CAAC,EAAF,CAAtB;AACAD,IAAAA,IAAI,GAAG1B,CAAP;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAAC4B,QAAD,CAAL;AACD;;AAED,MACG,OAAO5B,CAAP,KAAc,QAAd,IACC,OAAOA,CAAP,KAAc,QADf,IAEC,OAAOA,CAAP,KAAc,SAFf,IAGCA,CAAC,KAAK,IAHR,IAIA2B,CAAC,KAAKH,KAAK,CAAChB,MALd,EAME;AACA,QAAIgB,KAAK,CAACG,CAAC,GAAG,CAAL,CAAL,IAAgBD,IAApB,EAA0B;AACxB;AACA;AACA;AACA;AACD,KAND,CAOA;AACA;AACA;;;AACA1B,IAAAA,CAAC,GAAG3B,SAAJ;AACD;;AAED,MAAIS,GAAG,GAAGY,WAAW,CAACG,OAAZ,CAAoBvC,GAApB,CAAwB0C,CAAxB,CAAV;;AACA,MAAI,CAAClB,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAG,IAAI+C,GAAJ,EAAN;AACAnC,IAAAA,WAAW,CAACG,OAAZ,CAAoBf,GAApB,CAAwBkB,CAAxB,EAA2BlB,GAA3B;AACD;;AACDA,EAAAA,GAAG,CAACgD,GAAJ,CAAQhE,IAAR;AACD;;AAEM,MAAMiE,sBAAsB,GAAG,CACpCpC,EADoC,EAEpCuB,cAFoC,EAGpCnB,MAHoC,EAIpCvB,aAJoC,EAKpC4C,YALoC,KAM3B;AACT;AACA;AAEA,QAAMC,KAAK,GAAGtE,QAAMC,QAAN,EAAd;;AACA,QAAM;AAAEmC,IAAAA;AAAF,MAAyBkC,KAA/B;AAEA,QAAM3B,WAAyB,GAAG;AAAEC,IAAAA,EAAF;AAAME,IAAAA,OAAO,EAAE,IAAIjB,GAAJ,EAAf;AAA0B8B,IAAAA,IAAI,EAAE;AAAhC,GAAlC;AACAU,EAAAA,YAAY,CAACtC,GAAb,CAAiBoC,cAAjB,EAAiCxB,WAAjC;;AAEA,MAAIlB,aAAa,CAACgC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BjD,IAAAA,cAAc,CAACiB,aAAa,CAAC,CAAD,CAAd,CAAd,CAAiCe,OAAjC,CAAyCzB,IAAI,IAAI;AAC/CkE,MAAAA,4BAA4B,CAC1BlE,IAD0B,EAE1BA,IAF0B,EAG1BiC,MAH0B,EAI1BL,WAJ0B,EAK1BP,kBAL0B,CAA5B;AAOD,KARD;AASD,GAVD,MAUO;AACL;AACAkC,IAAAA,KAAK,CAACvE,KAAN,CAAYyC,OAAZ,CAAoBzB,IAAI,IAAI;AAC1B,UAAI,CAACU,aAAa,CAAC+C,QAAd,CAAuBzD,IAAI,CAACC,QAAL,CAAcP,IAArC,CAAL,EAAiD;AAC/C;AACD;;AAEDwE,MAAAA,4BAA4B,CAC1BlE,IAD0B,EAE1BA,IAF0B,EAG1BiC,MAH0B,EAI1BL,WAJ0B,EAK1BP,kBAL0B,CAA5B;AAOD,KAZD;AAaD;;AAEDM,EAAAA,qBAAqB,CAACC,WAAD,EAAcC,EAAd,CAArB;AACD,CA5CM;;;;AA8CP,SAASqC,4BAAT,CACElE,IADF,EAEEmE,kBAFF,EAE2B;AACzBlC,MAHF,EAIEL,WAJF,EAKEP,kBALF,EAMQ;AACN;AACA,MAAI,CAACrB,IAAI,CAACsB,iBAAV,EAA6B;AAC3B,UAAMV,QAAQ,GAAGZ,IAAI,CAACC,QAAL,CAAcP,IAA/B;AACA,UAAMmB,aAAa,GAAGQ,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAAtB;AACAZ,IAAAA,IAAI,CAACsB,iBAAL,GAAyBT,aAAzB,aAAyBA,aAAzB,uBAAyBA,aAAa,CAAErB,GAAf,CAAmBQ,IAAI,CAACT,EAAxB,CAAzB;AACD;;AAED,QAAM;AAAEa,IAAAA,IAAF;AAAQgE,IAAAA;AAAR,MAAwBnC,MAA9B,CARM,CAUN;;AACA,MAAI4B,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGzD,IAAI,CAACsC,MAAT,IAAmByB,kBAA1B,EAA8C;AAC5C,UAAML,QAAQ,GAAG1D,IAAI,CAACyD,CAAC,EAAF,CAArB;AACAM,IAAAA,kBAAkB,GAAGA,kBAAkB,CAACL,QAAD,CAAvC;AACD;;AAED,MAAI1D,IAAI,CAACsC,MAAL,KAAgBmB,CAApB,EAAuB;AACrB;AACA;AACD,GApBK,CAsBN;;;AAEA,MAAI1E,KAAK,CAACkF,OAAN,CAAcF,kBAAd,CAAJ,EAAuC;AACrC;AACA;AACA;AACA;AACAA,IAAAA,kBAAkB,CAAC1C,OAAnB,CAA2B6C,IAAI,IAAI;AACjC,UAAIF,WAAW,CAAC1E,IAAZ,KAAsB,WAA1B,EAAsC;AACpCwE,QAAAA,4BAA4B,CAC1BlE,IAD0B,EAE1BsE,IAF0B,EAG1BF,WAH0B,EAI1BxC,WAJ0B,EAK1BP,kBAL0B,CAA5B;AAOD,OARD,MAQO;AACL;AACAmC,QAAAA,oBAAoB,CAClBxD,IADkB,EAElBoE,WAAW,CAAChE,IAFM,EAGlBwB,WAHkB,EAIlBP,kBAJkB,EAKlBiD,IALkB,CAApB;AAOD;AACF,KAnBD;AAoBD;AACF;;AAED,MAAMC,eAAe,GAAG,CACtBlF,MADsB,EAEtBmF,MAFsB,KAGW;AACjC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGrF,MAAM,CAACqD,MAAP,GAAgB,CAA1B;AACA,MAAIiC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWxF,MAAM,CAACqD,MAAP,GAAgB,CAA3B,CAAZ;;AACA,SAAO+B,GAAG,IAAIC,GAAd,EAAmB;AACjB,UAAMI,KAAK,GAAGzF,MAAM,CAACsF,KAAD,CAApB;;AACA,QAAIH,MAAM,GAAGM,KAAb,EAAoB;AAClB;AACA;AACAJ,MAAAA,GAAG,GAAGC,KAAN;AACD,KAJD,MAIO,IAAIH,MAAM,GAAGM,KAAb,EAAoB;AACzB;AACA;AACAL,MAAAA,GAAG,GAAGE,KAAN;AACD,KAJM,MAIA;AACL;AACA;AACA,aAAO,CAACA,KAAD,EAAQA,KAAR,CAAP;AACD;;AAED,QAAID,GAAG,GAAGD,GAAN,IAAa,CAAjB,EAAoB;AAClB;AACA;AACA,aAAO,CAACA,GAAD,EAAMC,GAAN,CAAP;AACD;;AAEDC,IAAAA,KAAK,GAAGF,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAW,CAACH,GAAG,GAAGD,GAAP,IAAc,CAAzB,CAAd;AACD,GA3BgC,CA6BjC;;;AACA,SAAOlE,SAAP;AACD,CAlCD;;AAmCA,MAAMwE,gBAAgB,GAAG,CACvB1F,MADuB,EAEvBmF,MAFuB,KAGU;AACjC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGrF,MAAM,CAACqD,MAAP,GAAgB,CAA1B;AACA,MAAIiC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWxF,MAAM,CAACqD,MAAP,GAAgB,CAA3B,CAAZ;;AACA,SAAO+B,GAAG,IAAIC,GAAd,EAAmB;AACjB,UAAMI,KAAK,GAAGzF,MAAM,CAACsF,KAAD,CAApB;;AACA,QAAIH,MAAM,GAAGM,KAAb,EAAoB;AAClB;AACA;AACAL,MAAAA,GAAG,GAAGE,KAAN;AACD,KAJD,MAIO,IAAIH,MAAM,GAAGM,KAAb,EAAoB;AACzB;AACA;AACAJ,MAAAA,GAAG,GAAGC,KAAN;AACD,KAJM,MAIA;AACL;AACA;AACA,aAAO,CAACA,KAAD,EAAQA,KAAR,CAAP;AACD;;AAED,QAAID,GAAG,GAAGD,GAAN,IAAa,CAAjB,EAAoB;AAClB;AACA;AACA,aAAO,CAACA,GAAD,EAAMC,GAAN,CAAP;AACD;;AAEDC,IAAAA,KAAK,GAAGF,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAW,CAACH,GAAG,GAAGD,GAAP,IAAc,CAAzB,CAAd;AACD,GA3BgC,CA6BjC;;;AACA,SAAOlE,SAAP;AACD,CAlCD;AAoCA;;;;;;;;;;;AASO,MAAMyE,wBAAwB,GAAG,CACtC5B,cADsC,EAEtC6B,WAFsC,EAGtC3B,YAHsC,KAIL;AACjC,QAAM1B,WAAW,GAAG0B,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAE9D,GAAd,CAAkB4D,cAAlB,CAApB;;AACA,MAAI,CAACxB,WAAL,EAAkB;AAChB,WAAOrB,SAAP;AACD;;AAED,QAAMsB,EAAE,GAAGD,WAAW,CAACC,EAAvB;;AAEA,MAAIA,EAAE,KAAM,KAAZ,EAAkB;AAChB,QAAIoD,WAAW,IAAI,IAAnB,EAAyB;AAAA;;AACvB;AACA;AACA;AACA,aAAO,IAAIlB,GAAJ,CAAQ,CACb,6BAAInC,WAAW,CAACG,OAAZ,CAAoBvC,GAApB,CAAwB,IAAxB,CAAJ,yEAAqC,EAArC,CADa,EAEb,8BAAIoC,WAAW,CAACG,OAAZ,CAAoBvC,GAApB,CAAwBe,SAAxB,CAAJ,2EAA0C,EAA1C,CAFa,CAAR,CAAP;AAID;;AACD,WAAOqB,WAAW,CAACG,OAAZ,CAAoBvC,GAApB,CAAwByF,WAAxB,CAAP;AACD;;AAED,MAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA;AACA,WAAOrD,WAAW,CAACG,OAAZ,CAAoBvC,GAApB,CAAwByF,WAAxB,CAAP;AACD;;AAED,MAAIpD,EAAE,KAAM,MAAZ,EAAmB;AACjB;AACA;AAEA,UAAMqD,MAAM,GAAGtD,WAAW,CAACgB,IAAZ,CAAiBG,cAAhC;AACA,UAAM/D,KAAK,GAAG4C,WAAW,CAACgB,IAAZ,CAAiBE,eAA/B;AAEA,UAAMqC,KAAK,GAAGD,MAAM,CAAE1F,GAAR,CAAYyF,WAAZ,CAAd;;AACA,QAAIE,KAAJ,EAAW;AACT,aAAO,IAAIpB,GAAJ,CAAQ/E,KAAK,CAAEoG,KAAP,CAAa,CAAb,EAAgBD,KAAK,CAAC,CAAD,CAArB,CAAR,CAAP;AACD,KAVgB,CAYjB;AACA;AACA;AAEA;;;AACA,UAAM9F,MAAM,GAAGuC,WAAW,CAACgB,IAAZ,CAAiBC,SAAhC,CAjBiB,CAkBjB;AACA;;AACA,UAAMwC,KAAK,GAAGd,eAAe,CAAClF,MAAD,EAAS4F,WAAT,CAA7B;;AACA,QAAI,CAACI,KAAL,EAAY;AACV,aAAO9E,SAAP;AACD;;AACD,UAAM,CAAC+E,QAAD,EAAWC,QAAX,IAAuBF,KAA7B,CAxBiB,CA0BjB;AACA;AACA;;AACA,QAAIG,UAAU,GAAGnG,MAAM,CAACkG,QAAD,CAAvB;;AACA,QAAIC,UAAU,GAAGP,WAAjB,EAA8B;AAC5BO,MAAAA,UAAU,GAAGnG,MAAM,CAACiG,QAAD,CAAnB;AACD,KAhCgB,CAkCjB;AACA;AACA;;;AAEA,UAAM,CAACG,SAAD,EAAYC,SAAZ,IAAyBR,MAAM,CAAE1F,GAAR,CAAYgG,UAAZ,CAA/B,CAtCiB,CAwCjB;AACA;;AACA,UAAMG,KAAK,GAAGH,UAAU,IAAIP,WAAd,GAA4BS,SAA5B,GAAwCD,SAAtD;AACA,WAAO,IAAI1B,GAAJ,CAAQ/E,KAAK,CAAEoG,KAAP,CAAa,CAAb,EAAgBO,KAAhB,CAAR,CAAP;AACD;;AAED,MAAI9D,EAAE,KAAM,MAAZ,EAAmB;AACjB;AACA;AAEA,UAAMqD,MAAM,GAAGtD,WAAW,CAACgB,IAAZ,CAAiBM,eAAhC;AACA,UAAMlE,KAAK,GAAG4C,WAAW,CAACgB,IAAZ,CAAiBK,gBAA/B;AAEA,UAAMkC,KAAK,GAAGD,MAAM,CAAE1F,GAAR,CAAYyF,WAAZ,CAAd;;AACA,QAAIE,KAAJ,EAAW;AACT,aAAO,IAAIpB,GAAJ,CAAQ/E,KAAK,CAAEoG,KAAP,CAAa,CAAb,EAAgBD,KAAK,CAAC,CAAD,CAArB,CAAR,CAAP;AACD,KAVgB,CAYjB;AACA;AACA;AAEA;;;AACA,UAAM9F,MAAM,GAAGuC,WAAW,CAACgB,IAAZ,CAAiBI,UAAhC,CAjBiB,CAkBjB;AACA;;AACA,UAAMqC,KAAK,GAAGN,gBAAgB,CAAC1F,MAAD,EAAS4F,WAAT,CAA9B;;AACA,QAAI,CAACI,KAAL,EAAY;AACV,aAAO9E,SAAP;AACD;;AACD,UAAM,CAAC+E,QAAD,EAAWC,QAAX,IAAuBF,KAA7B,CAxBiB,CA0BjB;AACA;AACA;;AACA,QAAIG,UAAU,GAAGnG,MAAM,CAACkG,QAAD,CAAvB;;AACA,QAAIC,UAAU,GAAGP,WAAjB,EAA8B;AAC5BO,MAAAA,UAAU,GAAGnG,MAAM,CAACiG,QAAD,CAAnB;AACD,KAhCgB,CAkCjB;AACA;AACA;;;AAEA,UAAM,CAACG,SAAD,EAAYC,SAAZ,IAAyBR,MAAM,CAAE1F,GAAR,CAAYgG,UAAZ,CAA/B,CAtCiB,CAwCjB;AACA;;AACA,UAAMG,KAAK,GAAGH,UAAU,IAAIP,WAAd,GAA4BS,SAA5B,GAAwCD,SAAtD;AACA,WAAO,IAAI1B,GAAJ,CAAQ/E,KAAK,CAAEoG,KAAP,CAAa,CAAb,EAAgBO,KAAhB,CAAR,CAAP;AACD,GArHgC,CAuHjC;;;AACA,SAAOpF,SAAP;AACD,CA7HM","sourcesContent":["import { store } from \"./\"\nimport { IGatsbyNode } from \"./types\"\nimport { createPageDependency } from \"./actions/add-page-dependency\"\nimport { IDbQueryElemMatch } from \"../db/common/query\"\n\n// Only list supported ops here. \"CacheableFilterOp\"\ntype FilterOp = \"$eq\" | \"$lte\" | \"$gte\"\n// Note: `undefined` is an encoding for a property that does not exist\ntype FilterValueNullable = string | number | boolean | null | undefined\n// This is filter value in most cases\ntype FilterValue = string | number | boolean\nexport type FilterCacheKey = string\nexport interface IFilterCache {\n  op: FilterOp\n  // In this set, `undefined` values represent nodes that did not have the path\n  byValue: Map<FilterValueNullable, Set<IGatsbyNode>>\n  meta: {\n    // Ordered set of all values (by `<`) found by this filter. No null / undefs\n    valuesAsc?: Array<FilterValue>\n    // Flat set of nodes, ordered by valueAsc, but not ordered per value group\n    nodesByValueAsc?: Array<IGatsbyNode>\n    // Ranges of nodes per value, maps to the nodesByValueAsc array\n    valueRangesAsc?: Map<FilterValue, [number, number]>\n    // Ordered set of all values (by `>`) found by this filter. No null / undefs\n    valuesDesc?: Array<FilterValue>\n    // Flat set of nodes, ordered by valueDesc, but not ordered per value group\n    nodesByValueDesc?: Array<IGatsbyNode>\n    // Ranges of nodes per value, maps to the nodesByValueDesc array\n    valueRangesDesc?: Map<FilterValue, [number, number]>\n  }\n}\nexport type FiltersCache = Map<FilterCacheKey, IFilterCache>\n\n/**\n * Get all nodes from redux store.\n */\nexport const getNodes = (): IGatsbyNode[] => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * Get node by id from store.\n */\nexport const getNode = (id: string): IGatsbyNode | undefined =>\n  store.getState().nodes.get(id)\n\n/**\n * Get all nodes of type from redux store.\n */\nexport const getNodesByType = (type: string): IGatsbyNode[] => {\n  const nodes = store.getState().nodesByType.get(type)\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * Get all type names from redux store.\n */\nexport const getTypes = (): string[] =>\n  Array.from(store.getState().nodesByType.keys())\n\n/**\n * Determine if node has changed.\n */\nexport const hasNodeChanged = (id: string, digest: string): boolean => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getNodeAndSavePathDependency = (\n  id: string,\n  path: string\n): IGatsbyNode | undefined => {\n  const node = getNode(id)\n\n  if (!node) {\n    console.error(\n      `getNodeAndSavePathDependency failed for node id: ${id} as it was not found in cache`\n    )\n    return undefined\n  }\n\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\ntype Resolver = (node: IGatsbyNode) => Promise<any> // TODO\n\nexport const saveResolvedNodes = async (\n  nodeTypeNames: string[],\n  resolver: Resolver\n): Promise<void> => {\n  for (const typeName of nodeTypeNames) {\n    const nodes = store.getState().nodesByType.get(typeName)\n    if (!nodes) return\n\n    const resolvedNodes = new Map()\n    for (const node of nodes.values()) {\n      const resolved = await resolver(node)\n      resolvedNodes.set(node.id, resolved)\n    }\n    store.dispatch({\n      type: `SET_RESOLVED_NODES`,\n      payload: {\n        key: typeName,\n        nodes: resolvedNodes,\n      },\n    })\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getResolvedNode = (\n  typeName: string,\n  id: string\n): IGatsbyNode | null => {\n  const { nodesByType, resolvedNodesCache } = store.getState()\n  const nodes = nodesByType.get(typeName)\n\n  if (!nodes) {\n    return null\n  }\n\n  const node = nodes.get(id)\n\n  if (!node) {\n    return null\n  }\n\n  const resolvedNodes = resolvedNodesCache.get(typeName)\n\n  if (resolvedNodes) {\n    node.__gatsby_resolved = resolvedNodes.get(id)\n  }\n\n  return node\n}\n\nexport const addResolvedNodes = (\n  typeName: string,\n  resolvedNodes: IGatsbyNode[] = []\n): IGatsbyNode[] => {\n  const { nodesByType, resolvedNodesCache } = store.getState()\n  const nodes = nodesByType.get(typeName)\n\n  if (!nodes) {\n    return []\n  }\n\n  const resolvedNodesFromCache = resolvedNodesCache.get(typeName)\n\n  nodes.forEach(node => {\n    if (resolvedNodesFromCache) {\n      node.__gatsby_resolved = resolvedNodesFromCache.get(node.id)\n    }\n    resolvedNodes.push(node)\n  })\n\n  return resolvedNodes\n}\n\nexport const postIndexingMetaSetup = (\n  filterCache: IFilterCache,\n  op: FilterOp\n): void => {\n  if (op !== `$lte` && op !== `$gte`) {\n    return\n  }\n\n  // Create an ordered array of individual nodes, ordered (grouped) by the\n  // value to which the filter resolves. Nodes are not ordered per value.\n  // This way non-eq ops can simply slice the array to get a range.\n\n  const entriesNullable: Array<[FilterValueNullable, Set<IGatsbyNode>]> = [\n    ...filterCache.byValue.entries(),\n  ]\n\n  // These range checks never return `null` or `undefined` so filter those out\n  // By filtering them out early, the sort should be faster. Could be ...\n  const entries: Array<[\n    FilterValue,\n    Set<IGatsbyNode>\n  ]> = entriesNullable.filter(([v]) => v != null) as Array<\n    [FilterValue, Set<IGatsbyNode>]\n  >\n\n  // Sort all sets by its value, asc. Ignore/allow potential type casting.\n  // Note: while `<` is the inverse of `>=`, the ordering might coerce values.\n  // This coercion makes the op no longer idempotent (normally the result of\n  // `a < b` is the opposite of `b >= a` for any a or b of the same type). The\n  // exception is a number that is `NaN`, which we're ignoring here as it's most\n  // likely a bug in the user code. However, when coercing the ops may end up\n  // comparing against `NaN`, too. For example: `(\"abc\" <= 12) !== (12 > \"abc\")`\n  // which ends up doing `NaN <= 12` and `NaN > \"abc\"`, which will both yield\n  // false.\n  // So instead we potentially track two ordered lists; ascending and descending\n  // and the only difference when comparing the inverse of one to the other\n  // should be how these `NaN` cases end up getting ordered.\n  // It's fine for `lt` and `lte` to use the same ordered set. Same for gt/gte.\n  if (op === `$lte`) {\n    // Order ascending; first value is lowest\n    entries.sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))\n  } else if (op === `$gte`) {\n    // Order descending; first value is highest\n    entries.sort(([a], [b]) => (a > b ? -1 : a < b ? 1 : 0))\n  }\n\n  const orderedNodes: Array<IGatsbyNode> = []\n  const orderedValues: Array<FilterValue> = []\n  const offsets: Map<FilterValue, [number, number]> = new Map()\n  entries.forEach(([v, bucket]: [FilterValue, Set<IGatsbyNode>]) => {\n    // Record the range containing all nodes with as filter value v\n    // The last value of the range should be the offset of the next value\n    // (So you should be able to do `nodes.slice(start, stop)` to get them)\n    offsets.set(v, [orderedNodes.length, orderedNodes.length + bucket.size])\n    // We could do `arr.push(...bucket)` here but that's not safe with very\n    // large sets, so we use a regular loop\n    bucket.forEach(node => orderedNodes.push(node))\n    orderedValues.push(v)\n  })\n\n  if (op === `$lte`) {\n    filterCache.meta.valuesAsc = orderedValues\n    filterCache.meta.nodesByValueAsc = orderedNodes\n    // The nodesByValueAsc is ordered by value, but multiple nodes per value are\n    // not ordered. To make lt as fast as lte, we must know the start and stop\n    // index for each value. Similarly useful for for `ne`.\n    filterCache.meta.valueRangesAsc = offsets\n  } else if (op === `$gte`) {\n    filterCache.meta.valuesDesc = orderedValues\n    filterCache.meta.nodesByValueDesc = orderedNodes\n    // The nodesByValueDesc is ordered by value, but multiple nodes per value are\n    // not ordered. To make gt as fast as gte, we must know the start and stop\n    // index for each value. Similarly useful for for `ne`.\n    filterCache.meta.valueRangesDesc = offsets\n  }\n}\n\n/**\n * Given a single non-elemMatch filter path, a set of node types, and a\n * cache, create a cache that for each resulting value of the filter contains\n * all the Nodes in a Set.\n * This cache is used for applying the filter and is a massive improvement over\n * looping over all the nodes, when the number of pages (/nodes) scales up.\n */\nexport const ensureIndexByQuery = (\n  op: FilterOp,\n  filterCacheKey: FilterCacheKey,\n  filterPath: string[],\n  nodeTypeNames: string[],\n  filtersCache: FiltersCache\n): void => {\n  const state = store.getState()\n  const resolvedNodesCache = state.resolvedNodesCache\n\n  const filterCache: IFilterCache = { op, byValue: new Map(), meta: {} }\n  filtersCache.set(filterCacheKey, filterCache)\n\n  // We cache the subsets of nodes by type, but only one type. So if searching\n  // through one node type we can prevent a search through all nodes, otherwise\n  // it's probably faster to loop through all nodes. Perhaps. Maybe.\n\n  if (nodeTypeNames.length === 1) {\n    getNodesByType(nodeTypeNames[0]).forEach(node => {\n      addNodeToFilterCache(node, filterPath, filterCache, resolvedNodesCache)\n    })\n  } else {\n    // Here we must first filter for the node type\n    // This loop is expensive at scale (!)\n    state.nodes.forEach(node => {\n      if (!nodeTypeNames.includes(node.internal.type)) {\n        return\n      }\n\n      addNodeToFilterCache(node, filterPath, filterCache, resolvedNodesCache)\n    })\n  }\n\n  postIndexingMetaSetup(filterCache, op)\n}\n\nfunction addNodeToFilterCache(\n  node: IGatsbyNode,\n  chain: Array<string>,\n  filterCache: IFilterCache,\n  resolvedNodesCache,\n  valueOffset: any = node\n): void {\n  // There can be a filter that targets `__gatsby_resolved` so fix that first\n  if (!node.__gatsby_resolved) {\n    const typeName = node.internal.type\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    node.__gatsby_resolved = resolvedNodes?.get(node.id)\n  }\n\n  // - for plain query, valueOffset === node\n  // - for elemMatch, valueOffset is sub-tree of the node to continue matching\n  let v = valueOffset as any\n  let prev = v\n  let i = 0\n  while (i < chain.length && v) {\n    const nextProp = chain[i++]\n    prev = v\n    v = v[nextProp]\n  }\n\n  if (\n    (typeof v !== `string` &&\n      typeof v !== `number` &&\n      typeof v !== `boolean` &&\n      v !== null) ||\n    i !== chain.length\n  ) {\n    if (chain[i - 1] in prev) {\n      // This means that either\n      // - The filter resolved to `undefined`, or\n      // - The filter resolved to something other than a primitive\n      return\n    }\n    // The filter path did not fully exist in node. Encode this as `undefined`.\n    // The edge case is that `eq` will return these for `null` checks while\n    // range checks like `lte` do not return these, so we make a distinction.\n    v = undefined\n  }\n\n  let set = filterCache.byValue.get(v)\n  if (!set) {\n    set = new Set()\n    filterCache.byValue.set(v, set)\n  }\n  set.add(node)\n}\n\nexport const ensureIndexByElemMatch = (\n  op: FilterOp,\n  filterCacheKey: FilterCacheKey,\n  filter: IDbQueryElemMatch,\n  nodeTypeNames: Array<string>,\n  filtersCache: FiltersCache\n): void => {\n  // Given an elemMatch filter, generate the cache that contains all nodes that\n  // matches a given value for that sub-query\n\n  const state = store.getState()\n  const { resolvedNodesCache } = state\n\n  const filterCache: IFilterCache = { op, byValue: new Map(), meta: {} }\n  filtersCache.set(filterCacheKey, filterCache)\n\n  if (nodeTypeNames.length === 1) {\n    getNodesByType(nodeTypeNames[0]).forEach(node => {\n      addNodeToBucketWithElemMatch(\n        node,\n        node,\n        filter,\n        filterCache,\n        resolvedNodesCache\n      )\n    })\n  } else {\n    // Expensive at scale\n    state.nodes.forEach(node => {\n      if (!nodeTypeNames.includes(node.internal.type)) {\n        return\n      }\n\n      addNodeToBucketWithElemMatch(\n        node,\n        node,\n        filter,\n        filterCache,\n        resolvedNodesCache\n      )\n    })\n  }\n\n  postIndexingMetaSetup(filterCache, op)\n}\n\nfunction addNodeToBucketWithElemMatch(\n  node: IGatsbyNode,\n  valueAtCurrentStep: any, // Arbitrary step on the path inside the node\n  filter: IDbQueryElemMatch,\n  filterCache: IFilterCache,\n  resolvedNodesCache\n): void {\n  // There can be a filter that targets `__gatsby_resolved` so fix that first\n  if (!node.__gatsby_resolved) {\n    const typeName = node.internal.type\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    node.__gatsby_resolved = resolvedNodes?.get(node.id)\n  }\n\n  const { path, nestedQuery } = filter\n\n  // Find the value to apply elemMatch to\n  let i = 0\n  while (i < path.length && valueAtCurrentStep) {\n    const nextProp = path[i++]\n    valueAtCurrentStep = valueAtCurrentStep[nextProp]\n  }\n\n  if (path.length !== i) {\n    // Found undefined before the end of the path, so let Sift take over\n    return\n  }\n\n  // `v` should now be an elemMatch target, probably an array (but maybe not)\n\n  if (Array.isArray(valueAtCurrentStep)) {\n    // Note: We need to check all elements because the node may need to be added\n    // to multiple buckets (`{a:[{b:3},{b:4}]}`, for `a.elemMatch.b/eq` that\n    // node ends up in buckets for value 3 and 4. This may lead to duplicate\n    // work when elements resolve to the same value, but that can't be helped.\n    valueAtCurrentStep.forEach(elem => {\n      if (nestedQuery.type === `elemMatch`) {\n        addNodeToBucketWithElemMatch(\n          node,\n          elem,\n          nestedQuery,\n          filterCache,\n          resolvedNodesCache\n        )\n      } else {\n        // Now take same route as non-elemMatch filters would take\n        addNodeToFilterCache(\n          node,\n          nestedQuery.path,\n          filterCache,\n          resolvedNodesCache,\n          elem\n        )\n      }\n    })\n  }\n}\n\nconst binarySearchAsc = (\n  values: Array<FilterValue>, // Assume ordered asc\n  needle: FilterValue\n): [number, number] | undefined => {\n  let min = 0\n  let max = values.length - 1\n  let pivot = Math.floor(values.length / 2)\n  while (min <= max) {\n    const value = values[pivot]\n    if (needle < value) {\n      // Move pivot to middle of nodes left of current pivot\n      // assert pivot < max\n      max = pivot\n    } else if (needle > value) {\n      // Move pivot to middle of nodes right of current pivot\n      // assert pivot > min\n      min = pivot\n    } else {\n      // This means needle === value\n      // TODO: except for NaN ... and potentially certain type casting cases\n      return [pivot, pivot]\n    }\n\n    if (max - min <= 1) {\n      // End of search. Needle not found (as expected). Use pivot as index.\n      // If the needle was not found, max-min==1 and max is returned.\n      return [min, max]\n    }\n\n    pivot = min + Math.floor((max - min) / 2)\n  }\n\n  // Shouldn't be reachable, but just in case, fall back to Sift if so.\n  return undefined\n}\nconst binarySearchDesc = (\n  values: Array<FilterValue>, // Assume ordered desc\n  needle: FilterValue\n): [number, number] | undefined => {\n  let min = 0\n  let max = values.length - 1\n  let pivot = Math.floor(values.length / 2)\n  while (min <= max) {\n    const value = values[pivot]\n    if (needle < value) {\n      // Move pivot to middle of nodes right of current pivot\n      // assert pivot < min\n      min = pivot\n    } else if (needle > value) {\n      // Move pivot to middle of nodes left of current pivot\n      // assert pivot > max\n      max = pivot\n    } else {\n      // This means needle === value\n      // TODO: except for NaN ... and potentially certain type casting cases\n      return [pivot, pivot]\n    }\n\n    if (max - min <= 1) {\n      // End of search. Needle not found (as expected). Use pivot as index.\n      // If the needle was not found, max-min==1 and max is returned.\n      return [min, max]\n    }\n\n    pivot = min + Math.floor((max - min) / 2)\n  }\n\n  // Shouldn't be reachable, but just in case, fall back to Sift if so.\n  return undefined\n}\n\n/**\n * Given the cache key for a filter and a target value return the set of nodes\n * that resolve to this value.\n * This returns `undefined` if there is no such node\n *\n * Basically if the filter was {a: {b: {slug: {eq: \"foo/bar\"}}}} then it will\n * return all the nodes that have `node.slug === \"foo/bar\"`. That usually (but\n * not always) at most one node for slug, but this filter can apply to anything.\n */\nexport const getNodesFromCacheByValue = (\n  filterCacheKey: FilterCacheKey,\n  filterValue: FilterValueNullable,\n  filtersCache: FiltersCache\n): Set<IGatsbyNode> | undefined => {\n  const filterCache = filtersCache?.get(filterCacheKey)\n  if (!filterCache) {\n    return undefined\n  }\n\n  const op = filterCache.op\n\n  if (op === `$eq`) {\n    if (filterValue == null) {\n      // Edge case; fetch all nodes for `null` and `undefined` because `$eq`\n      // also returns nodes without the path when searching for `null`. Not\n      // ops do so, so we map non-existing paths to `undefined`.\n      return new Set([\n        ...(filterCache.byValue.get(null) ?? []),\n        ...(filterCache.byValue.get(undefined) ?? []),\n      ])\n    }\n    return filterCache.byValue.get(filterValue)\n  }\n\n  if (filterValue == null) {\n    // This is an edge case and this value should be directly indexed\n    // For `lte`/`gte` this should only return nodes for `null`, not a \"range\"\n    return filterCache.byValue.get(filterValue)\n  }\n\n  if (op === `$lte`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole set, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesAsc\n    const nodes = filterCache.meta.nodesByValueAsc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      return new Set(nodes!.slice(0, range[1]))\n    }\n\n    // Query may ask for a value that doesn't appear in the set, like if the\n    // set is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for lte, the valueAsc array must be set at this point\n    const values = filterCache.meta.valuesAsc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchAsc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do lte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue > filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 <= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue <= filterValue ? inclPivot : exclPivot\n    return new Set(nodes!.slice(0, until))\n  }\n\n  if (op === `$gte`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole set, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesDesc\n    const nodes = filterCache.meta.nodesByValueDesc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      return new Set(nodes!.slice(0, range[1]))\n    }\n\n    // Query may ask for a value that doesn't appear in the set, like if the\n    // set is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for gte, the valueDesc array must be set at this point\n    const values = filterCache.meta.valuesDesc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchDesc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do gte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue < filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 >= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue >= filterValue ? inclPivot : exclPivot\n    return new Set(nodes!.slice(0, until))\n  }\n\n  // Unreachable because we checked all values of FilterOp (which op is)\n  return undefined\n}\n"],"file":"nodes.js"}