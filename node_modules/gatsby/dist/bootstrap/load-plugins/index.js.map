{"version":3,"sources":["../../../src/bootstrap/load-plugins/index.js"],"names":["_","require","store","ssrAPIs","loadPlugins","collatePluginAPIs","handleBadExports","handleMultipleReplaceRenderers","getAPI","api","keys","reduce","merged","key","flattenPlugins","plugins","flattened","extractPlugins","plugin","pluginOptions","forEach","subPlugin","push","module","exports","config","rootDir","currentAPIs","browser","browserAPIs","node","nodeAPIs","ssr","flattenedPlugins","x","badExports","dispatch","type","payload"],"mappings":";;;;AAGA;;AACA;;AAJA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAE,aAAF,CAAzB;;AAGA,MAAME,OAAO,GAAGF,OAAO,CAAE,iCAAF,CAAvB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAkBH,OAAO,CAAE,QAAF,CAA/B;;AACA,MAAM;AACJI,EAAAA,iBADI;AAEJC,EAAAA,gBAFI;AAGJC,EAAAA;AAHI,IAIFN,OAAO,CAAE,YAAF,CAJX;;AAMA,MAAMO,MAAM,GAAGC,GAAG,IAChBT,CAAC,CAACU,IAAF,CAAOD,GAAP,EAAYE,MAAZ,CAAmB,CAACC,MAAD,EAASC,GAAT,KAAiB;AAClCD,EAAAA,MAAM,CAACC,GAAD,CAAN,GAAcb,CAAC,CAACU,IAAF,CAAOD,GAAG,CAACI,GAAD,CAAV,CAAd;AACA,SAAOD,MAAP;AACD,CAHD,EAGG,EAHH,CADF,C,CAMA;AACA;AACA;;;AACA,MAAME,cAAc,GAAGC,OAAO,IAAI;AAChC,QAAMC,SAAS,GAAG,EAAlB;;AACA,QAAMC,cAAc,GAAGC,MAAM,IAAI;AAC/BA,IAAAA,MAAM,CAACC,aAAP,CAAqBJ,OAArB,CAA6BK,OAA7B,CAAqCC,SAAS,IAAI;AAChDL,MAAAA,SAAS,CAACM,IAAV,CAAeD,SAAf;AACAJ,MAAAA,cAAc,CAACI,SAAD,CAAd;AACD,KAHD;AAID,GALD;;AAOAN,EAAAA,OAAO,CAACK,OAAR,CAAgBF,MAAM,IAAI;AACxBF,IAAAA,SAAS,CAACM,IAAV,CAAeJ,MAAf;AACAD,IAAAA,cAAc,CAACC,MAAD,CAAd;AACD,GAHD;AAKA,SAAOF,SAAP;AACD,CAfD;;AAiBAO,MAAM,CAACC,OAAP,GAAiB,OAAOC,MAAM,GAAG,EAAhB,EAAoBC,OAAO,GAAG,IAA9B,KAAuC;AACtD,QAAMC,WAAW,GAAGnB,MAAM,CAAC;AACzBoB,IAAAA,OAAO,EAAEC,WADgB;AAEzBC,IAAAA,IAAI,EAAEC,QAFmB;AAGzBC,IAAAA,GAAG,EAAE7B;AAHoB,GAAD,CAA1B,CADsD,CAMtD;;AACA,QAAMY,OAAO,GAAGX,WAAW,CAACqB,MAAD,EAASC,OAAT,CAA3B,CAPsD,CAStD;;AACA,MAAIO,gBAAgB,GAAGnB,cAAc,CAACC,OAAD,CAArC,CAVsD,CAYtD;AACA;;AACA,QAAMmB,CAAC,GAAG7B,iBAAiB,CAAC;AAAEsB,IAAAA,WAAF;AAAeM,IAAAA;AAAf,GAAD,CAA3B;AACAA,EAAAA,gBAAgB,GAAGC,CAAC,CAACD,gBAArB;AACA,QAAME,UAAU,GAAGD,CAAC,CAACC,UAArB,CAhBsD,CAkBtD;;AACA,QAAM7B,gBAAgB,CAAC;AAAEqB,IAAAA,WAAF;AAAeQ,IAAAA;AAAf,GAAD,CAAtB,CAnBsD,CAqBtD;;AACAF,EAAAA,gBAAgB,GAAG1B,8BAA8B,CAAC;AAChD0B,IAAAA;AADgD,GAAD,CAAjD,CAtBsD,CA0BtD;;AACA/B,EAAAA,KAAK,CAACkC,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAG,4BADM;AAEbC,IAAAA,OAAO,EAAEL;AAFI,GAAf;AAKA,SAAOA,gBAAP;AACD,CAjCD","sourcesContent":["const _ = require(`lodash`)\n\nconst { store } = require(`../../redux`)\nimport * as nodeAPIs from \"../../utils/api-node-docs\"\nimport * as browserAPIs from \"../../utils/api-browser-docs\"\nconst ssrAPIs = require(`../../../cache-dir/api-ssr-docs`)\nconst { loadPlugins } = require(`./load`)\nconst {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n} = require(`./validate`)\n\nconst getAPI = api =>\n  _.keys(api).reduce((merged, key) => {\n    merged[key] = _.keys(api[key])\n    return merged\n  }, {})\n\n// Create a \"flattened\" array of plugins with all subplugins\n// brought to the top-level. This simplifies running gatsby-* files\n// for subplugins.\nconst flattenPlugins = plugins => {\n  const flattened = []\n  const extractPlugins = plugin => {\n    plugin.pluginOptions.plugins.forEach(subPlugin => {\n      flattened.push(subPlugin)\n      extractPlugins(subPlugin)\n    })\n  }\n\n  plugins.forEach(plugin => {\n    flattened.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  return flattened\n}\n\nmodule.exports = async (config = {}, rootDir = null) => {\n  const currentAPIs = getAPI({\n    browser: browserAPIs,\n    node: nodeAPIs,\n    ssr: ssrAPIs,\n  })\n  // Collate internal plugins, site config plugins, site default plugins\n  const plugins = loadPlugins(config, rootDir)\n\n  // Create a flattened array of the plugins\n  let flattenedPlugins = flattenPlugins(plugins)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const x = collatePluginAPIs({ currentAPIs, flattenedPlugins })\n  flattenedPlugins = x.flattenedPlugins\n  const badExports = x.badExports\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  await handleBadExports({ currentAPIs, badExports })\n\n  // Show errors when ReplaceRenderer has been implemented multiple times\n  flattenedPlugins = handleMultipleReplaceRenderers({\n    flattenedPlugins,\n  })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins,\n  })\n\n  return flattenedPlugins\n}\n"],"file":"index.js"}