{"version":3,"sources":["../../../src/schema/types/pagination.ts"],"names":["getPageInfo","schemaComposer","getOrCreateOTC","tc","addFields","currentPage","hasPreviousPage","hasNextPage","itemCount","pageCount","perPage","getEdge","typeComposer","typeName","getTypeName","derivedTypeName","next","node","getTypeNonNull","previous","createPagination","fields","paginationTypeComposer","totalCount","edges","nodes","pageInfo","makeFieldNonNull","getGroup","field","fieldValue","getPagination","inputTypeComposer","getInputTypeComposer","fieldsEnumTC","distinct","type","args","resolve","group","skip","limit"],"mappings":"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","sourcesContent":["import {\n  SchemaComposer,\n  ObjectTypeComposer,\n  InputTypeComposer,\n  InterfaceTypeComposer,\n  ComposeFieldConfigMap,\n} from \"graphql-compose\"\nimport { getFieldsEnum } from \"./sort\"\nimport { addDerivedType } from \"./derived-types\"\nimport { distinct, group } from \"../resolvers\"\n\nexport const getPageInfo = <TContext = any>({\n  schemaComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n}): ObjectTypeComposer =>\n  schemaComposer.getOrCreateOTC(`PageInfo`, tc => {\n    tc.addFields({\n      currentPage: `Int!`,\n      hasPreviousPage: `Boolean!`,\n      hasNextPage: `Boolean!`,\n      itemCount: `Int!`,\n      pageCount: `Int!`,\n      perPage: `Int`,\n    })\n  })\n\nexport const getEdge = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n}): ObjectTypeComposer => {\n  const typeName = `${typeComposer.getTypeName()}Edge`\n  addDerivedType({ typeComposer, derivedTypeName: typeName })\n  return schemaComposer.getOrCreateOTC(typeName, tc => {\n    tc.addFields({\n      next: typeComposer,\n      node: typeComposer.getTypeNonNull(),\n      previous: typeComposer,\n    })\n  })\n}\n\nconst createPagination = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n  fields,\n  typeName,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n  fields: ComposeFieldConfigMap<TSource, TContext>\n  typeName: string\n}): ObjectTypeComposer => {\n  const paginationTypeComposer: ObjectTypeComposer = schemaComposer.getOrCreateOTC(\n    typeName,\n    tc => {\n      tc.addFields({\n        totalCount: `Int!`,\n        edges: [getEdge({ schemaComposer, typeComposer }).getTypeNonNull()],\n        nodes: [typeComposer.getTypeNonNull()],\n        pageInfo: getPageInfo({ schemaComposer }).getTypeNonNull(),\n        ...fields,\n      })\n    }\n  )\n  paginationTypeComposer.makeFieldNonNull(`edges`)\n  paginationTypeComposer.makeFieldNonNull(`nodes`)\n  addDerivedType({ typeComposer, derivedTypeName: typeName })\n  return paginationTypeComposer\n}\n\nexport const getGroup = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n}): ObjectTypeComposer => {\n  const typeName = `${typeComposer.getTypeName()}GroupConnection`\n  const fields = {\n    field: `String!`,\n    fieldValue: `String`,\n  }\n  return createPagination({ schemaComposer, typeComposer, fields, typeName })\n}\n\nexport const getPagination = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n}): ObjectTypeComposer => {\n  const inputTypeComposer: InputTypeComposer = typeComposer.getInputTypeComposer()\n  const typeName = `${typeComposer.getTypeName()}Connection`\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const fields = {\n    distinct: {\n      type: [`String!`],\n      args: {\n        field: fieldsEnumTC.getTypeNonNull(),\n      },\n      resolve: distinct,\n    },\n    group: {\n      type: [getGroup({ schemaComposer, typeComposer }).getTypeNonNull()],\n      args: {\n        skip: `Int`,\n        limit: `Int`,\n        field: fieldsEnumTC.getTypeNonNull(),\n      },\n      resolve: group,\n    },\n  }\n  const paginationTypeComposer: ObjectTypeComposer = createPagination({\n    schemaComposer,\n    typeComposer,\n    fields,\n    typeName,\n  })\n  paginationTypeComposer.makeFieldNonNull(`distinct`)\n  paginationTypeComposer.makeFieldNonNull(`group`)\n  return paginationTypeComposer\n}\n"],"file":"pagination.js"}